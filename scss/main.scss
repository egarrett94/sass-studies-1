//--mixins vs extends--
// using mixins generate larger css files which can limit the speed
// of your page load

// using extends limitations: media queries (no base classes outside media query)
// and can only use single selectors rather than stacking like (.foo .bar)

// if you g-zip your css files, mixins perform better than the extends. 
// g-zipping reduces page load time



//sass looks for these files by using the sass preprocessor 
//and it looks at the current directory you are in 
//you can't have a _variables partial and a variables.scss 
//because then the preprocessor doesn't know which one you mean
//so you need to keep an eye on the naming conventions
@import "partials/functions";
@import "partials/variables";
@import "partials/mixins";
//can also import like this:
//@import "partials/variables", "partials/mixins";

// generated as normal css imports
// @import url();
// @import "http://";
// @ import "filename.css"
// @import "style-screen" screen; <-- this is a media query

//sass imports allow sass and scss files 

@include google-font("Open+Sans");
@include google-font("Titillium+Web");
@include fancy-links;

@include apply-to-ie-6 {
	//add any styles / code only wanted on ie6
	body {
		font-size: 125%;
		//now only in ie6 will the font size be larger than usual
	}
}

.error {
	color: red;
}

.critical-error {
	//this inherits stylings from the error class
	@extend .error;
	bottom: 1px solid red;
	font-weight: bold;
}

$contrast: high;

body {
  font-family: sans-serif;
  @if $contrast == high {
	color: black;
  } @else if $contrast == low {
  	color: #999;
  } @else {
  	color: $text-color;
  }
  
  // color: rgb(10, 15, 50);
  // background-color: hsl(60, 50%, 100%);
  font-size: em(18px); //this makes font-size on .css file to 1.125 em


  @include large-screens {
  	font-size: 125%;
  }
}

h1, h2, h3, h4 {
	font-family: $headline-font; 
}

h2 {
	@include large-text;
}

p {
	font-family: $text-font;
}

a {
	color: $link-color;
	// font-weight: bold;
	
	//pseudo elements with sass
	&:hover {
				// darkens by 15%
		color: darken($link-color, 15%)
	}
}

//extend only class -- doesn't generate css code
//from this selector itself
%highlight {
	font-style: italic;
}
//calling on the extend only class ^^ 
.sub-title {
	@extend %highlight;
	@extend .foo !optional; //if !optional wasn't here this would break
							//the code because there is no .foo selector
							//but since we have !optional the preprocessor 
							//ignores that it's there if it doesn't work
	font-size: 20px;
}

.warning-button {
	@include warning;
	padding: 8px 12px;
}

.cta-button {
	// @extend .headline.large; //OK syntax
	// @extend .headline .large; //NOT OK syntax
	@extend .warning-button;
	@extend .error; //can have multiple @extend directives
	@include rounded;
	font-weight: bold;
}

//"@extend" cannot be within a media query if the 
//class it's extending is not within the media query itself
//but you can extend classes created within a media query 
//outside the scope of the media query itself
.super-cta-button {
	@extend .cta-button;
	font-size: em(20px);
}

#header {
	@include box($border: 1px solid #fff, $radius: 10px);
	@include box-shadow(2px 0px 4px #999, 1px 1px 6px $secondary-color);
	height: $header-height;
	background-color: $theme-color;

  #main-menu {

  	li {
  		display: inline;
  	}

	a { 
		color: $menu-item;
		border-bottom: 1px solid transparentize(#fefefe, 1);
		padding: 6px 8px;
		transition: border-bottom 0.5s;
		transition-timing-function: ease-in-out;

		&:hover {
			border-bottom: 1px solid opacify(#fefefe, 0.5);
		}
	}

  }
  
  #logo {

  }
}

#main {
	
	width: $content-width;
	//you can nest media queries too
	@include large-screens {
		width: auto;
		max-width: $content-width;
	}
	margin-left: auto;
	margin-right: auto;

  #content {
  	float: left;
  	width: 6 * $col;
  }

  #sidebar {
  	float: right;
  	width: 2 * $col;

  	li {
  		list-style-type: none;
  		padding: em(16px) em(20px);
  		border-bottom: 1px dashed #999;

  		&:hover{
  			background-color: #efefef;
  		}
  	}
  }
}

.clearfix::after {
    content: "";
    clear: both;
    display: table;
}

#footer {

	height: $footer-height;
	background-color: $ternary-color;
}
